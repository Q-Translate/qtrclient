<?php
/**
 * @file
 * Module file for qtrClient.
 */

module_load_include('php', 'qtrClient', 'lib/qcl');

/**
 * Implements hook_init().
 */
function qtrClient_init() {
  // Include the stylesheets.
  $path = drupal_get_path('module', 'qtrClient');
  drupal_add_css($path . '/css/styles.css.less');
}

/**
 * Implements hook_inside_iframe().
 */
function qtrClient_inside_iframe() {
  $path = drupal_get_path('module', 'qtrClient');
  drupal_add_css($path . '/css/iframe.css.less');
}

/**
 * Implements hook_menu().
 */
function qtrClient_menu() {

  $items = array();

  $items['admin/config/qcl'] = array(
    'title' => 'Q-Translate Client',
    'description' => 'Q-Translate Client Profile',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access callback' => TRUE,
  );

  $items['admin/config/qcl/client'] = array(
    'title'            => 'BTR Client',
    'description'      => 'Q-Translate Client configuration settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('qtrClient_config'),
    'access callback'  => TRUE,
    'file'             => 'callback/admin.inc',
  );

  // Return a RSS feed.
  $items['qtr/rss-feed'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Latest Translation Feedback',
    'page callback'   => 'qtrClient_rss_feed',
    'file'            => 'callback/rss_feed.inc',
    'access callback' => TRUE,
  );

  // Return a random tweet from Q-Translate.
  $items['qtr/tweet'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Return a random string (and translations) in a form suitable for twitter.',
    'page callback'   => 'qtrClient_tweet',
    'file'            => 'callback/tweet.inc',
    'access callback' => TRUE,
  );

  // Return a string context, related projects (where a string is found), etc.
  $items['qtr/ajax/string_details'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'String details',
    'page callback'   => 'qtrClient_string_details',
    'file'            => 'callback/ajax.inc',
    'access callback' => TRUE,
  );


  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function qtrClient_menu_alter(&$items) {
  // Move the configuration of oauth2_login to the section of Q-Translate.
  $items['admin/config/qcl/oauth2_login'] = $items['admin/config/people/oauth2_login'];
  unset($items['admin/config/people/oauth2_login']);
}

/**
 * Implements hook_oauth2_profile_fields_alter().
 */
function qtrClient_oauth2_profile_fields_alter(&$profile_fields) {
  // Add these additional fields to the profile.
  // These extra fields can be defined by the server
  // on hook_oauth2_loginprovider_userprofile_alter().
  $profile_fields += [
    'translation_lng',
    'auxiliary_languages',
    'permissions',
    'subscribed_projects',
    'admin_projects',
    'moderate_projects',
  ];
}

/**
 * Implements hook_oauth2_user_alter().
 *
 * $oauth2_user is the remote user profile that comes from the server.
 */
function qtrClient_oauth2_user_alter(&$oauth2_user) {
  // Keep only the fields of the user profile that we are interested in.
  $qtr_user = [
    'uid' => $oauth2_user['identifier'],
    'name' => $oauth2_user['displayName'],
    'translation_lng' => $oauth2_user['translation_lng'],
    'auxiliary_languages' => $oauth2_user['auxiliary_languages'],
    'permissions' => $oauth2_user['permissions'],
    'subscribed_projects' => $oauth2_user['subscribed_projects'],
    'admin_projects' => $oauth2_user['admin_projects'],
    'moderate_projects' => $oauth2_user['moderate_projects'],
  ];
  $oauth2_user = $qtr_user;
}


/**
 * Implementation of hook_form_alter().
 */
function qtrClient_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    $form['remote_account'] = array(
      '#type' => 'fieldset',
      '#title' => t('Edit the profile on Q-Translate Server'),
      '#weight' => -500,
      '#suffix' => '<hr/>',
    );
    $url = variable_get('qtrClient_server') . '/user/';
    $form['remote_account']['link_to_qtranslator_profile'] = array(
      '#markup' => '<a href="' . $url . '" target="_blank" class="btn btn-default">'
      . t('Edit Q-Translate Profile') . '</a>',
    );
  }
}

/**
 * Implements hook_theme().
 */
function qtrClient_theme($existing, $type, $theme, $path) {
  return array(
    'qtrClient_filter_form_element' => array(
      'render element' => 'element',
    ),
    'qtrClient_translate_translation' => array(
      'render element' => 'element',
    ),
    'qtrClient_translate_actions' => array(
      'render element' => 'element',
    ),
    'qtrClient_in_context' => array(
      'variables' => array('source' => NULL),
    ),
    'qtrClient_translate_radio' => array(
      'render element' => 'element',
    ),
    'qtrClient_translate_source' => array(
      'render element' => 'element',
    ),
    'qtrClient_translate_translation_list' => array(
      'render element' => 'element',
    ),
    'qtrClient_translate_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_flush_caches().
 *
 * Add cache table names to the list of cache tables
 * that will be cleared by the Clear button on the Performance page
 * or whenever drupal_flush_all_caches is invoked.
 * Returns an array of cache table names.
 */
function qtrClient_flush_caches() {
  return array('cache_qtrClient');
}
